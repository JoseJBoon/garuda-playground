syntax = "proto3";

option java_multiple_files = true;
option java_package = "com.dhilipsiva.garuda";
option java_outer_classname = "GarudaProto";
option objc_class_prefix = "DSG";

package garuda;

message Void {}

message ID {
    int64 id = 1;
}


enum ArticleStatus {
    ArticleStatusUNKNOWN = 0;
    UNPUBLISHED = 1;
    PUBLISHED = 2;
    REVIEW_REQUIRED = 3;
    DELETED = 4;
}


message LogEntry {
    string id = 1;
    int32 action_flag = 2;
    string action_time = 3;
    string change_message = 4;
    int64 content_type_id = 5;
    string object_id = 6;
    string object_repr = 7;
    int64 user_id = 8;
}

message Permission {
    string id = 1;
    string codename = 2;
    int64 content_type_id = 3;
    repeated string group = 4;
    string name = 5;
    repeated string user = 6;
}

message Group {
    string id = 1;
    string name = 2;
    repeated string permissions = 3;
    repeated string user = 4;
}

message User {
    string id = 1;
    string date_joined = 2;
    string email = 3;
    string first_name = 4;
    repeated string groups = 5;
    bool is_active = 6;
    bool is_staff = 7;
    bool is_superuser = 8;
    string last_login = 9;
    string last_name = 10;
    repeated string logentry = 11;
    string password = 12;
    repeated string user_permissions = 13;
    string username = 14;
}

message ContentType {
    string id = 1;
    string app_label = 2;
    repeated string logentry = 3;
    string model = 4;
    repeated string permission = 5;
}

message Session {
    string id = 1;
    string expire_date = 2;
    string session_data = 3;
    string session_key = 4;
}

message Article {
    string id = 1;
    string content = 2;
    ArticleStatus status = 3;
    string title = 4;
}

message Book {
    string id = 1;
    repeated string chapter = 2;
    string name = 3;
    string published = 4;
}

message Chapter {
    string id = 1;
    int64 book_id = 2;
    string name = 3;
    string text = 4;
}

message Person {
    string id = 1;
    int32 age = 2;
    string city = 3;
    repeated string friends = 4;
    string name = 5;
}

service Garuda{
  rpc DeleteLogEntry(ID) returns (Void);
  rpc UpdateLogEntry(LogEntry) returns (Void);
  rpc ReadLogEntry(ID) returns (LogEntry);
  rpc CreateLogEntry(LogEntry) returns (LogEntry);
  rpc ReadLogEntrysFilter(Void) returns (stream LogEntry);

  rpc DeletePermission(ID) returns (Void);
  rpc UpdatePermission(Permission) returns (Void);
  rpc ReadPermission(ID) returns (Permission);
  rpc CreatePermission(Permission) returns (Permission);
  rpc ReadPermissionsFilter(Void) returns (stream Permission);

  rpc DeleteGroup(ID) returns (Void);
  rpc UpdateGroup(Group) returns (Void);
  rpc ReadGroup(ID) returns (Group);
  rpc CreateGroup(Group) returns (Group);
  rpc ReadGroupsFilter(Void) returns (stream Group);

  rpc DeleteUser(ID) returns (Void);
  rpc UpdateUser(User) returns (Void);
  rpc ReadUser(ID) returns (User);
  rpc CreateUser(User) returns (User);
  rpc ReadUsersFilter(Void) returns (stream User);

  rpc DeleteContentType(ID) returns (Void);
  rpc UpdateContentType(ContentType) returns (Void);
  rpc ReadContentType(ID) returns (ContentType);
  rpc CreateContentType(ContentType) returns (ContentType);
  rpc ReadContentTypesFilter(Void) returns (stream ContentType);

  rpc DeleteSession(ID) returns (Void);
  rpc UpdateSession(Session) returns (Void);
  rpc ReadSession(ID) returns (Session);
  rpc CreateSession(Session) returns (Session);
  rpc ReadSessionsFilter(Void) returns (stream Session);

  rpc DeleteArticle(ID) returns (Void);
  rpc UpdateArticle(Article) returns (Void);
  rpc ReadArticle(ID) returns (Article);
  rpc CreateArticle(Article) returns (Article);
  rpc ReadArticlesFilter(Void) returns (stream Article);

  rpc DeleteBook(ID) returns (Void);
  rpc UpdateBook(Book) returns (Void);
  rpc ReadBook(ID) returns (Book);
  rpc CreateBook(Book) returns (Book);
  rpc ReadBooksFilter(Void) returns (stream Book);

  rpc DeleteChapter(ID) returns (Void);
  rpc UpdateChapter(Chapter) returns (Void);
  rpc ReadChapter(ID) returns (Chapter);
  rpc CreateChapter(Chapter) returns (Chapter);
  rpc ReadChaptersFilter(Void) returns (stream Chapter);

  rpc DeletePerson(ID) returns (Void);
  rpc UpdatePerson(Person) returns (Void);
  rpc ReadPerson(ID) returns (Person);
  rpc CreatePerson(Person) returns (Person);
  rpc ReadPeopleFilter(Void) returns (stream Person);
}